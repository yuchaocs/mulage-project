/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.umich.clarity.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-9")
public class LatencySpec implements org.apache.thrift.TBase<LatencySpec, LatencySpec._Fields>, java.io.Serializable, Cloneable, Comparable<LatencySpec> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LatencySpec");

  private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instance_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField QUEUING_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("queuing_start_time", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SERVING_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("serving_start_time", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SERVING_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("serving_end_time", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LatencySpecStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LatencySpecTupleSchemeFactory());
  }

  public String instance_id; // required
  public long queuing_start_time; // required
  public long serving_start_time; // required
  public long serving_end_time; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INSTANCE_ID((short)1, "instance_id"),
    QUEUING_START_TIME((short)2, "queuing_start_time"),
    SERVING_START_TIME((short)3, "serving_start_time"),
    SERVING_END_TIME((short)4, "serving_end_time");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INSTANCE_ID
          return INSTANCE_ID;
        case 2: // QUEUING_START_TIME
          return QUEUING_START_TIME;
        case 3: // SERVING_START_TIME
          return SERVING_START_TIME;
        case 4: // SERVING_END_TIME
          return SERVING_END_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __QUEUING_START_TIME_ISSET_ID = 0;
  private static final int __SERVING_START_TIME_ISSET_ID = 1;
  private static final int __SERVING_END_TIME_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instance_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUEUING_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("queuing_start_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SERVING_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("serving_start_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SERVING_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("serving_end_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LatencySpec.class, metaDataMap);
  }

  public LatencySpec() {
  }

  public LatencySpec(
    String instance_id,
    long queuing_start_time,
    long serving_start_time,
    long serving_end_time)
  {
    this();
    this.instance_id = instance_id;
    this.queuing_start_time = queuing_start_time;
    setQueuing_start_timeIsSet(true);
    this.serving_start_time = serving_start_time;
    setServing_start_timeIsSet(true);
    this.serving_end_time = serving_end_time;
    setServing_end_timeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LatencySpec(LatencySpec other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInstance_id()) {
      this.instance_id = other.instance_id;
    }
    this.queuing_start_time = other.queuing_start_time;
    this.serving_start_time = other.serving_start_time;
    this.serving_end_time = other.serving_end_time;
  }

  public LatencySpec deepCopy() {
    return new LatencySpec(this);
  }

  @Override
  public void clear() {
    this.instance_id = null;
    setQueuing_start_timeIsSet(false);
    this.queuing_start_time = 0;
    setServing_start_timeIsSet(false);
    this.serving_start_time = 0;
    setServing_end_timeIsSet(false);
    this.serving_end_time = 0;
  }

  public String getInstance_id() {
    return this.instance_id;
  }

  public LatencySpec setInstance_id(String instance_id) {
    this.instance_id = instance_id;
    return this;
  }

  public void unsetInstance_id() {
    this.instance_id = null;
  }

  /** Returns true if field instance_id is set (has been assigned a value) and false otherwise */
  public boolean isSetInstance_id() {
    return this.instance_id != null;
  }

  public void setInstance_idIsSet(boolean value) {
    if (!value) {
      this.instance_id = null;
    }
  }

  public long getQueuing_start_time() {
    return this.queuing_start_time;
  }

  public LatencySpec setQueuing_start_time(long queuing_start_time) {
    this.queuing_start_time = queuing_start_time;
    setQueuing_start_timeIsSet(true);
    return this;
  }

  public void unsetQueuing_start_time() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUEUING_START_TIME_ISSET_ID);
  }

  /** Returns true if field queuing_start_time is set (has been assigned a value) and false otherwise */
  public boolean isSetQueuing_start_time() {
    return EncodingUtils.testBit(__isset_bitfield, __QUEUING_START_TIME_ISSET_ID);
  }

  public void setQueuing_start_timeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUEUING_START_TIME_ISSET_ID, value);
  }

  public long getServing_start_time() {
    return this.serving_start_time;
  }

  public LatencySpec setServing_start_time(long serving_start_time) {
    this.serving_start_time = serving_start_time;
    setServing_start_timeIsSet(true);
    return this;
  }

  public void unsetServing_start_time() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVING_START_TIME_ISSET_ID);
  }

  /** Returns true if field serving_start_time is set (has been assigned a value) and false otherwise */
  public boolean isSetServing_start_time() {
    return EncodingUtils.testBit(__isset_bitfield, __SERVING_START_TIME_ISSET_ID);
  }

  public void setServing_start_timeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVING_START_TIME_ISSET_ID, value);
  }

  public long getServing_end_time() {
    return this.serving_end_time;
  }

  public LatencySpec setServing_end_time(long serving_end_time) {
    this.serving_end_time = serving_end_time;
    setServing_end_timeIsSet(true);
    return this;
  }

  public void unsetServing_end_time() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVING_END_TIME_ISSET_ID);
  }

  /** Returns true if field serving_end_time is set (has been assigned a value) and false otherwise */
  public boolean isSetServing_end_time() {
    return EncodingUtils.testBit(__isset_bitfield, __SERVING_END_TIME_ISSET_ID);
  }

  public void setServing_end_timeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVING_END_TIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INSTANCE_ID:
      if (value == null) {
        unsetInstance_id();
      } else {
        setInstance_id((String)value);
      }
      break;

    case QUEUING_START_TIME:
      if (value == null) {
        unsetQueuing_start_time();
      } else {
        setQueuing_start_time((Long)value);
      }
      break;

    case SERVING_START_TIME:
      if (value == null) {
        unsetServing_start_time();
      } else {
        setServing_start_time((Long)value);
      }
      break;

    case SERVING_END_TIME:
      if (value == null) {
        unsetServing_end_time();
      } else {
        setServing_end_time((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INSTANCE_ID:
      return getInstance_id();

    case QUEUING_START_TIME:
      return Long.valueOf(getQueuing_start_time());

    case SERVING_START_TIME:
      return Long.valueOf(getServing_start_time());

    case SERVING_END_TIME:
      return Long.valueOf(getServing_end_time());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INSTANCE_ID:
      return isSetInstance_id();
    case QUEUING_START_TIME:
      return isSetQueuing_start_time();
    case SERVING_START_TIME:
      return isSetServing_start_time();
    case SERVING_END_TIME:
      return isSetServing_end_time();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LatencySpec)
      return this.equals((LatencySpec)that);
    return false;
  }

  public boolean equals(LatencySpec that) {
    if (that == null)
      return false;

    boolean this_present_instance_id = true && this.isSetInstance_id();
    boolean that_present_instance_id = true && that.isSetInstance_id();
    if (this_present_instance_id || that_present_instance_id) {
      if (!(this_present_instance_id && that_present_instance_id))
        return false;
      if (!this.instance_id.equals(that.instance_id))
        return false;
    }

    boolean this_present_queuing_start_time = true;
    boolean that_present_queuing_start_time = true;
    if (this_present_queuing_start_time || that_present_queuing_start_time) {
      if (!(this_present_queuing_start_time && that_present_queuing_start_time))
        return false;
      if (this.queuing_start_time != that.queuing_start_time)
        return false;
    }

    boolean this_present_serving_start_time = true;
    boolean that_present_serving_start_time = true;
    if (this_present_serving_start_time || that_present_serving_start_time) {
      if (!(this_present_serving_start_time && that_present_serving_start_time))
        return false;
      if (this.serving_start_time != that.serving_start_time)
        return false;
    }

    boolean this_present_serving_end_time = true;
    boolean that_present_serving_end_time = true;
    if (this_present_serving_end_time || that_present_serving_end_time) {
      if (!(this_present_serving_end_time && that_present_serving_end_time))
        return false;
      if (this.serving_end_time != that.serving_end_time)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_instance_id = true && (isSetInstance_id());
    list.add(present_instance_id);
    if (present_instance_id)
      list.add(instance_id);

    boolean present_queuing_start_time = true;
    list.add(present_queuing_start_time);
    if (present_queuing_start_time)
      list.add(queuing_start_time);

    boolean present_serving_start_time = true;
    list.add(present_serving_start_time);
    if (present_serving_start_time)
      list.add(serving_start_time);

    boolean present_serving_end_time = true;
    list.add(present_serving_end_time);
    if (present_serving_end_time)
      list.add(serving_end_time);

    return list.hashCode();
  }

  @Override
  public int compareTo(LatencySpec other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInstance_id()).compareTo(other.isSetInstance_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstance_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instance_id, other.instance_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueuing_start_time()).compareTo(other.isSetQueuing_start_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueuing_start_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queuing_start_time, other.queuing_start_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServing_start_time()).compareTo(other.isSetServing_start_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServing_start_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serving_start_time, other.serving_start_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServing_end_time()).compareTo(other.isSetServing_end_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServing_end_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serving_end_time, other.serving_end_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LatencySpec(");
    boolean first = true;

    sb.append("instance_id:");
    if (this.instance_id == null) {
      sb.append("null");
    } else {
      sb.append(this.instance_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queuing_start_time:");
    sb.append(this.queuing_start_time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serving_start_time:");
    sb.append(this.serving_start_time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serving_end_time:");
    sb.append(this.serving_end_time);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LatencySpecStandardSchemeFactory implements SchemeFactory {
    public LatencySpecStandardScheme getScheme() {
      return new LatencySpecStandardScheme();
    }
  }

  private static class LatencySpecStandardScheme extends StandardScheme<LatencySpec> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LatencySpec struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instance_id = iprot.readString();
              struct.setInstance_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUEUING_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.queuing_start_time = iprot.readI64();
              struct.setQueuing_start_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SERVING_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.serving_start_time = iprot.readI64();
              struct.setServing_start_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SERVING_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.serving_end_time = iprot.readI64();
              struct.setServing_end_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LatencySpec struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.instance_id != null) {
        oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
        oprot.writeString(struct.instance_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUEUING_START_TIME_FIELD_DESC);
      oprot.writeI64(struct.queuing_start_time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SERVING_START_TIME_FIELD_DESC);
      oprot.writeI64(struct.serving_start_time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SERVING_END_TIME_FIELD_DESC);
      oprot.writeI64(struct.serving_end_time);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LatencySpecTupleSchemeFactory implements SchemeFactory {
    public LatencySpecTupleScheme getScheme() {
      return new LatencySpecTupleScheme();
    }
  }

  private static class LatencySpecTupleScheme extends TupleScheme<LatencySpec> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LatencySpec struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInstance_id()) {
        optionals.set(0);
      }
      if (struct.isSetQueuing_start_time()) {
        optionals.set(1);
      }
      if (struct.isSetServing_start_time()) {
        optionals.set(2);
      }
      if (struct.isSetServing_end_time()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetInstance_id()) {
        oprot.writeString(struct.instance_id);
      }
      if (struct.isSetQueuing_start_time()) {
        oprot.writeI64(struct.queuing_start_time);
      }
      if (struct.isSetServing_start_time()) {
        oprot.writeI64(struct.serving_start_time);
      }
      if (struct.isSetServing_end_time()) {
        oprot.writeI64(struct.serving_end_time);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LatencySpec struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.instance_id = iprot.readString();
        struct.setInstance_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.queuing_start_time = iprot.readI64();
        struct.setQueuing_start_timeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.serving_start_time = iprot.readI64();
        struct.setServing_start_timeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.serving_end_time = iprot.readI64();
        struct.setServing_end_timeIsSet(true);
      }
    }
  }

}

