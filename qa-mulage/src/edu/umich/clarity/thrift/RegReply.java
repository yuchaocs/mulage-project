/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.umich.clarity.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-6-19")
public class RegReply implements org.apache.thrift.TBase<RegReply, RegReply._Fields>, java.io.Serializable, Cloneable, Comparable<RegReply> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegReply");

  private static final org.apache.thrift.protocol.TField SERVICE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("service_list", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField FINAL_STAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("final_stage", org.apache.thrift.protocol.TType.BOOL, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RegReplyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RegReplyTupleSchemeFactory());
  }

  public List<THostPort> service_list; // required
  public boolean final_stage; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERVICE_LIST((short)1, "service_list"),
    FINAL_STAGE((short)2, "final_stage");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVICE_LIST
          return SERVICE_LIST;
        case 2: // FINAL_STAGE
          return FINAL_STAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FINAL_STAGE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVICE_LIST, new org.apache.thrift.meta_data.FieldMetaData("service_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THostPort.class))));
    tmpMap.put(_Fields.FINAL_STAGE, new org.apache.thrift.meta_data.FieldMetaData("final_stage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RegReply.class, metaDataMap);
  }

  public RegReply() {
    this.final_stage = false;

  }

  public RegReply(
    List<THostPort> service_list,
    boolean final_stage)
  {
    this();
    this.service_list = service_list;
    this.final_stage = final_stage;
    setFinal_stageIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RegReply(RegReply other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetService_list()) {
      List<THostPort> __this__service_list = new ArrayList<THostPort>(other.service_list.size());
      for (THostPort other_element : other.service_list) {
        __this__service_list.add(new THostPort(other_element));
      }
      this.service_list = __this__service_list;
    }
    this.final_stage = other.final_stage;
  }

  public RegReply deepCopy() {
    return new RegReply(this);
  }

  @Override
  public void clear() {
    this.service_list = null;
    this.final_stage = false;

  }

  public int getService_listSize() {
    return (this.service_list == null) ? 0 : this.service_list.size();
  }

  public java.util.Iterator<THostPort> getService_listIterator() {
    return (this.service_list == null) ? null : this.service_list.iterator();
  }

  public void addToService_list(THostPort elem) {
    if (this.service_list == null) {
      this.service_list = new ArrayList<THostPort>();
    }
    this.service_list.add(elem);
  }

  public List<THostPort> getService_list() {
    return this.service_list;
  }

  public RegReply setService_list(List<THostPort> service_list) {
    this.service_list = service_list;
    return this;
  }

  public void unsetService_list() {
    this.service_list = null;
  }

  /** Returns true if field service_list is set (has been assigned a value) and false otherwise */
  public boolean isSetService_list() {
    return this.service_list != null;
  }

  public void setService_listIsSet(boolean value) {
    if (!value) {
      this.service_list = null;
    }
  }

  public boolean isFinal_stage() {
    return this.final_stage;
  }

  public RegReply setFinal_stage(boolean final_stage) {
    this.final_stage = final_stage;
    setFinal_stageIsSet(true);
    return this;
  }

  public void unsetFinal_stage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINAL_STAGE_ISSET_ID);
  }

  /** Returns true if field final_stage is set (has been assigned a value) and false otherwise */
  public boolean isSetFinal_stage() {
    return EncodingUtils.testBit(__isset_bitfield, __FINAL_STAGE_ISSET_ID);
  }

  public void setFinal_stageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINAL_STAGE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERVICE_LIST:
      if (value == null) {
        unsetService_list();
      } else {
        setService_list((List<THostPort>)value);
      }
      break;

    case FINAL_STAGE:
      if (value == null) {
        unsetFinal_stage();
      } else {
        setFinal_stage((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVICE_LIST:
      return getService_list();

    case FINAL_STAGE:
      return Boolean.valueOf(isFinal_stage());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERVICE_LIST:
      return isSetService_list();
    case FINAL_STAGE:
      return isSetFinal_stage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RegReply)
      return this.equals((RegReply)that);
    return false;
  }

  public boolean equals(RegReply that) {
    if (that == null)
      return false;

    boolean this_present_service_list = true && this.isSetService_list();
    boolean that_present_service_list = true && that.isSetService_list();
    if (this_present_service_list || that_present_service_list) {
      if (!(this_present_service_list && that_present_service_list))
        return false;
      if (!this.service_list.equals(that.service_list))
        return false;
    }

    boolean this_present_final_stage = true;
    boolean that_present_final_stage = true;
    if (this_present_final_stage || that_present_final_stage) {
      if (!(this_present_final_stage && that_present_final_stage))
        return false;
      if (this.final_stage != that.final_stage)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_service_list = true && (isSetService_list());
    list.add(present_service_list);
    if (present_service_list)
      list.add(service_list);

    boolean present_final_stage = true;
    list.add(present_final_stage);
    if (present_final_stage)
      list.add(final_stage);

    return list.hashCode();
  }

  @Override
  public int compareTo(RegReply other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetService_list()).compareTo(other.isSetService_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetService_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.service_list, other.service_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinal_stage()).compareTo(other.isSetFinal_stage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinal_stage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.final_stage, other.final_stage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RegReply(");
    boolean first = true;

    sb.append("service_list:");
    if (this.service_list == null) {
      sb.append("null");
    } else {
      sb.append(this.service_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("final_stage:");
    sb.append(this.final_stage);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RegReplyStandardSchemeFactory implements SchemeFactory {
    public RegReplyStandardScheme getScheme() {
      return new RegReplyStandardScheme();
    }
  }

  private static class RegReplyStandardScheme extends StandardScheme<RegReply> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RegReply struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVICE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.service_list = new ArrayList<THostPort>(_list8.size);
                THostPort _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new THostPort();
                  _elem9.read(iprot);
                  struct.service_list.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setService_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FINAL_STAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.final_stage = iprot.readBool();
              struct.setFinal_stageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RegReply struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.service_list != null) {
        oprot.writeFieldBegin(SERVICE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.service_list.size()));
          for (THostPort _iter11 : struct.service_list)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FINAL_STAGE_FIELD_DESC);
      oprot.writeBool(struct.final_stage);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RegReplyTupleSchemeFactory implements SchemeFactory {
    public RegReplyTupleScheme getScheme() {
      return new RegReplyTupleScheme();
    }
  }

  private static class RegReplyTupleScheme extends TupleScheme<RegReply> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RegReply struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetService_list()) {
        optionals.set(0);
      }
      if (struct.isSetFinal_stage()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetService_list()) {
        {
          oprot.writeI32(struct.service_list.size());
          for (THostPort _iter12 : struct.service_list)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetFinal_stage()) {
        oprot.writeBool(struct.final_stage);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RegReply struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.service_list = new ArrayList<THostPort>(_list13.size);
          THostPort _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new THostPort();
            _elem14.read(iprot);
            struct.service_list.add(_elem14);
          }
        }
        struct.setService_listIsSet(true);
      }
      if (incoming.get(1)) {
        struct.final_stage = iprot.readBool();
        struct.setFinal_stageIsSet(true);
      }
    }
  }

}

