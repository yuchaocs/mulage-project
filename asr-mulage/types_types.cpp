/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "types_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




THostPort::~THostPort() throw() {
}


void THostPort::__set_ip(const std::string& val) {
  this->ip = val;
}

void THostPort::__set_port(const int32_t val) {
  this->port = val;
}

const char* THostPort::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";
const uint8_t THostPort::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

uint32_t THostPort::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t THostPort::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("THostPort");

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(THostPort &a, THostPort &b) {
  using ::std::swap;
  swap(a.ip, b.ip);
  swap(a.port, b.port);
  swap(a.__isset, b.__isset);
}

THostPort::THostPort(const THostPort& other0) {
  ip = other0.ip;
  port = other0.port;
  __isset = other0.__isset;
}
THostPort& THostPort::operator=(const THostPort& other1) {
  ip = other1.ip;
  port = other1.port;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const THostPort& obj) {
  using apache::thrift::to_string;
  out << "THostPort(";
  out << "ip=" << to_string(obj.ip);
  out << ", " << "port=" << to_string(obj.port);
  out << ")";
  return out;
}


LatencySpec::~LatencySpec() throw() {
}


void LatencySpec::__set_instance_id(const std::string& val) {
  this->instance_id = val;
}

void LatencySpec::__set_queuing_start_time(const int64_t val) {
  this->queuing_start_time = val;
}

void LatencySpec::__set_serving_start_time(const int64_t val) {
  this->serving_start_time = val;
}

void LatencySpec::__set_serving_end_time(const int64_t val) {
  this->serving_end_time = val;
}

const char* LatencySpec::ascii_fingerprint = "01233FF45FD1A48AF6DDBF39A5D0547E";
const uint8_t LatencySpec::binary_fingerprint[16] = {0x01,0x23,0x3F,0xF4,0x5F,0xD1,0xA4,0x8A,0xF6,0xDD,0xBF,0x39,0xA5,0xD0,0x54,0x7E};

uint32_t LatencySpec::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->instance_id);
          this->__isset.instance_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->queuing_start_time);
          this->__isset.queuing_start_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serving_start_time);
          this->__isset.serving_start_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serving_end_time);
          this->__isset.serving_end_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LatencySpec::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("LatencySpec");

  xfer += oprot->writeFieldBegin("instance_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->instance_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("queuing_start_time", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->queuing_start_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serving_start_time", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->serving_start_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serving_end_time", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->serving_end_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(LatencySpec &a, LatencySpec &b) {
  using ::std::swap;
  swap(a.instance_id, b.instance_id);
  swap(a.queuing_start_time, b.queuing_start_time);
  swap(a.serving_start_time, b.serving_start_time);
  swap(a.serving_end_time, b.serving_end_time);
  swap(a.__isset, b.__isset);
}

LatencySpec::LatencySpec(const LatencySpec& other2) {
  instance_id = other2.instance_id;
  queuing_start_time = other2.queuing_start_time;
  serving_start_time = other2.serving_start_time;
  serving_end_time = other2.serving_end_time;
  __isset = other2.__isset;
}
LatencySpec& LatencySpec::operator=(const LatencySpec& other3) {
  instance_id = other3.instance_id;
  queuing_start_time = other3.queuing_start_time;
  serving_start_time = other3.serving_start_time;
  serving_end_time = other3.serving_end_time;
  __isset = other3.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const LatencySpec& obj) {
  using apache::thrift::to_string;
  out << "LatencySpec(";
  out << "instance_id=" << to_string(obj.instance_id);
  out << ", " << "queuing_start_time=" << to_string(obj.queuing_start_time);
  out << ", " << "serving_start_time=" << to_string(obj.serving_start_time);
  out << ", " << "serving_end_time=" << to_string(obj.serving_end_time);
  out << ")";
  return out;
}


QuerySpec::~QuerySpec() throw() {
}


void QuerySpec::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void QuerySpec::__set_input(const std::string& val) {
  this->input = val;
}

void QuerySpec::__set_timestamp(const std::vector<LatencySpec> & val) {
  this->timestamp = val;
}

void QuerySpec::__set_budget(const double val) {
  this->budget = val;
}

void QuerySpec::__set_floatingBudget(const double val) {
  this->floatingBudget = val;
}

const char* QuerySpec::ascii_fingerprint = "A54304EB3E0AD9A9AE80F7CA6F6AE4D2";
const uint8_t QuerySpec::binary_fingerprint[16] = {0xA5,0x43,0x04,0xEB,0x3E,0x0A,0xD9,0xA9,0xAE,0x80,0xF7,0xCA,0x6F,0x6A,0xE4,0xD2};

uint32_t QuerySpec::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->input);
          this->__isset.input = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->timestamp.clear();
            uint32_t _size4;
            ::apache::thrift::protocol::TType _etype7;
            xfer += iprot->readListBegin(_etype7, _size4);
            this->timestamp.resize(_size4);
            uint32_t _i8;
            for (_i8 = 0; _i8 < _size4; ++_i8)
            {
              xfer += this->timestamp[_i8].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->budget);
          this->__isset.budget = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->floatingBudget);
          this->__isset.floatingBudget = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QuerySpec::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("QuerySpec");

  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("input", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->input);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->timestamp.size()));
    std::vector<LatencySpec> ::const_iterator _iter9;
    for (_iter9 = this->timestamp.begin(); _iter9 != this->timestamp.end(); ++_iter9)
    {
      xfer += (*_iter9).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("budget", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->budget);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("floatingBudget", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->floatingBudget);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(QuerySpec &a, QuerySpec &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.input, b.input);
  swap(a.timestamp, b.timestamp);
  swap(a.budget, b.budget);
  swap(a.floatingBudget, b.floatingBudget);
  swap(a.__isset, b.__isset);
}

QuerySpec::QuerySpec(const QuerySpec& other10) {
  name = other10.name;
  input = other10.input;
  timestamp = other10.timestamp;
  budget = other10.budget;
  floatingBudget = other10.floatingBudget;
  __isset = other10.__isset;
}
QuerySpec& QuerySpec::operator=(const QuerySpec& other11) {
  name = other11.name;
  input = other11.input;
  timestamp = other11.timestamp;
  budget = other11.budget;
  floatingBudget = other11.floatingBudget;
  __isset = other11.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const QuerySpec& obj) {
  using apache::thrift::to_string;
  out << "QuerySpec(";
  out << "name="; (obj.__isset.name ? (out << to_string(obj.name)) : (out << "<null>"));
  out << ", " << "input=" << to_string(obj.input);
  out << ", " << "timestamp=" << to_string(obj.timestamp);
  out << ", " << "budget=" << to_string(obj.budget);
  out << ", " << "floatingBudget=" << to_string(obj.floatingBudget);
  out << ")";
  return out;
}


RegMessage::~RegMessage() throw() {
}


void RegMessage::__set_app_name(const std::string& val) {
  this->app_name = val;
}

void RegMessage::__set_endpoint(const THostPort& val) {
  this->endpoint = val;
}

void RegMessage::__set_budget(const double val) {
  this->budget = val;
}

const char* RegMessage::ascii_fingerprint = "B61C91CEFA669A76958C50E9981CDEEA";
const uint8_t RegMessage::binary_fingerprint[16] = {0xB6,0x1C,0x91,0xCE,0xFA,0x66,0x9A,0x76,0x95,0x8C,0x50,0xE9,0x98,0x1C,0xDE,0xEA};

uint32_t RegMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->app_name);
          this->__isset.app_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->endpoint.read(iprot);
          this->__isset.endpoint = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->budget);
          this->__isset.budget = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RegMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("RegMessage");

  xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->app_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endpoint", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->endpoint.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("budget", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->budget);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(RegMessage &a, RegMessage &b) {
  using ::std::swap;
  swap(a.app_name, b.app_name);
  swap(a.endpoint, b.endpoint);
  swap(a.budget, b.budget);
  swap(a.__isset, b.__isset);
}

RegMessage::RegMessage(const RegMessage& other12) {
  app_name = other12.app_name;
  endpoint = other12.endpoint;
  budget = other12.budget;
  __isset = other12.__isset;
}
RegMessage& RegMessage::operator=(const RegMessage& other13) {
  app_name = other13.app_name;
  endpoint = other13.endpoint;
  budget = other13.budget;
  __isset = other13.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const RegMessage& obj) {
  using apache::thrift::to_string;
  out << "RegMessage(";
  out << "app_name=" << to_string(obj.app_name);
  out << ", " << "endpoint=" << to_string(obj.endpoint);
  out << ", " << "budget=" << to_string(obj.budget);
  out << ")";
  return out;
}


