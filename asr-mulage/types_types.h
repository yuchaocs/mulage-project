/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef types_TYPES_H
#define types_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class THostPort;

class QuerySpec;

class RegMessage;

class RegReply;

typedef struct _THostPort__isset {
  _THostPort__isset() : ip(false), port(false) {}
  bool ip :1;
  bool port :1;
} _THostPort__isset;

class THostPort {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  THostPort(const THostPort&);
  THostPort& operator=(const THostPort&);
  THostPort() : ip(), port(0) {
  }

  virtual ~THostPort() throw();
  std::string ip;
  int32_t port;

  _THostPort__isset __isset;

  void __set_ip(const std::string& val);

  void __set_port(const int32_t val);

  bool operator == (const THostPort & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const THostPort &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THostPort & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THostPort& obj);
};

void swap(THostPort &a, THostPort &b);

typedef struct _QuerySpec__isset {
  _QuerySpec__isset() : name(false), input(false), timestamp(false), budget(false) {}
  bool name :1;
  bool input :1;
  bool timestamp :1;
  bool budget :1;
} _QuerySpec__isset;

class QuerySpec {
 public:

  static const char* ascii_fingerprint; // = "7F2C64C93BB20002149DCE29E7E29674";
  static const uint8_t binary_fingerprint[16]; // = {0x7F,0x2C,0x64,0xC9,0x3B,0xB2,0x00,0x02,0x14,0x9D,0xCE,0x29,0xE7,0xE2,0x96,0x74};

  QuerySpec(const QuerySpec&);
  QuerySpec& operator=(const QuerySpec&);
  QuerySpec() : name(), input(), budget(0) {
  }

  virtual ~QuerySpec() throw();
  std::string name;
  std::string input;
  std::vector<int64_t>  timestamp;
  double budget;

  _QuerySpec__isset __isset;

  void __set_name(const std::string& val);

  void __set_input(const std::string& val);

  void __set_timestamp(const std::vector<int64_t> & val);

  void __set_budget(const double val);

  bool operator == (const QuerySpec & rhs) const
  {
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (!(input == rhs.input))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(budget == rhs.budget))
      return false;
    return true;
  }
  bool operator != (const QuerySpec &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuerySpec & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QuerySpec& obj);
};

void swap(QuerySpec &a, QuerySpec &b);

typedef struct _RegMessage__isset {
  _RegMessage__isset() : app_name(false), endpoint(false), budget(false) {}
  bool app_name :1;
  bool endpoint :1;
  bool budget :1;
} _RegMessage__isset;

class RegMessage {
 public:

  static const char* ascii_fingerprint; // = "B61C91CEFA669A76958C50E9981CDEEA";
  static const uint8_t binary_fingerprint[16]; // = {0xB6,0x1C,0x91,0xCE,0xFA,0x66,0x9A,0x76,0x95,0x8C,0x50,0xE9,0x98,0x1C,0xDE,0xEA};

  RegMessage(const RegMessage&);
  RegMessage& operator=(const RegMessage&);
  RegMessage() : app_name(), budget(0) {
  }

  virtual ~RegMessage() throw();
  std::string app_name;
  THostPort endpoint;
  double budget;

  _RegMessage__isset __isset;

  void __set_app_name(const std::string& val);

  void __set_endpoint(const THostPort& val);

  void __set_budget(const double val);

  bool operator == (const RegMessage & rhs) const
  {
    if (!(app_name == rhs.app_name))
      return false;
    if (!(endpoint == rhs.endpoint))
      return false;
    if (!(budget == rhs.budget))
      return false;
    return true;
  }
  bool operator != (const RegMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegMessage& obj);
};

void swap(RegMessage &a, RegMessage &b);

typedef struct _RegReply__isset {
  _RegReply__isset() : service_list(false), final_stage(true) {}
  bool service_list :1;
  bool final_stage :1;
} _RegReply__isset;

class RegReply {
 public:

  static const char* ascii_fingerprint; // = "07B7E0B5CBB16B38AD46D3C055CB12C2";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xB7,0xE0,0xB5,0xCB,0xB1,0x6B,0x38,0xAD,0x46,0xD3,0xC0,0x55,0xCB,0x12,0xC2};

  RegReply(const RegReply&);
  RegReply& operator=(const RegReply&);
  RegReply() : final_stage(false) {
  }

  virtual ~RegReply() throw();
  std::vector<THostPort>  service_list;
  bool final_stage;

  _RegReply__isset __isset;

  void __set_service_list(const std::vector<THostPort> & val);

  void __set_final_stage(const bool val);

  bool operator == (const RegReply & rhs) const
  {
    if (!(service_list == rhs.service_list))
      return false;
    if (!(final_stage == rhs.final_stage))
      return false;
    return true;
  }
  bool operator != (const RegReply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegReply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegReply& obj);
};

void swap(RegReply &a, RegReply &b);



#endif
