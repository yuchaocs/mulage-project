/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IPAService_H
#define IPAService_H

#include <thrift/TDispatchProcessor.h>
#include "service_types.h"



class IPAServiceIf {
 public:
  virtual ~IPAServiceIf() {}
  virtual int32_t reportQueueLength() = 0;
  virtual void updatBudget(const double budget) = 0;
  virtual void submitQuery(const  ::QuerySpec& query) = 0;
};

class IPAServiceIfFactory {
 public:
  typedef IPAServiceIf Handler;

  virtual ~IPAServiceIfFactory() {}

  virtual IPAServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(IPAServiceIf* /* handler */) = 0;
};

class IPAServiceIfSingletonFactory : virtual public IPAServiceIfFactory {
 public:
  IPAServiceIfSingletonFactory(const boost::shared_ptr<IPAServiceIf>& iface) : iface_(iface) {}
  virtual ~IPAServiceIfSingletonFactory() {}

  virtual IPAServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(IPAServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<IPAServiceIf> iface_;
};

class IPAServiceNull : virtual public IPAServiceIf {
 public:
  virtual ~IPAServiceNull() {}
  int32_t reportQueueLength() {
    int32_t _return = 0;
    return _return;
  }
  void updatBudget(const double /* budget */) {
    return;
  }
  void submitQuery(const  ::QuerySpec& /* query */) {
    return;
  }
};


class IPAService_reportQueueLength_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  IPAService_reportQueueLength_args(const IPAService_reportQueueLength_args&);
  IPAService_reportQueueLength_args& operator=(const IPAService_reportQueueLength_args&);
  IPAService_reportQueueLength_args() {
  }

  virtual ~IPAService_reportQueueLength_args() throw();

  bool operator == (const IPAService_reportQueueLength_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IPAService_reportQueueLength_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPAService_reportQueueLength_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const IPAService_reportQueueLength_args& obj);
};


class IPAService_reportQueueLength_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~IPAService_reportQueueLength_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const IPAService_reportQueueLength_pargs& obj);
};

typedef struct _IPAService_reportQueueLength_result__isset {
  _IPAService_reportQueueLength_result__isset() : success(false) {}
  bool success :1;
} _IPAService_reportQueueLength_result__isset;

class IPAService_reportQueueLength_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  IPAService_reportQueueLength_result(const IPAService_reportQueueLength_result&);
  IPAService_reportQueueLength_result& operator=(const IPAService_reportQueueLength_result&);
  IPAService_reportQueueLength_result() : success(0) {
  }

  virtual ~IPAService_reportQueueLength_result() throw();
  int32_t success;

  _IPAService_reportQueueLength_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const IPAService_reportQueueLength_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const IPAService_reportQueueLength_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPAService_reportQueueLength_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const IPAService_reportQueueLength_result& obj);
};

typedef struct _IPAService_reportQueueLength_presult__isset {
  _IPAService_reportQueueLength_presult__isset() : success(false) {}
  bool success :1;
} _IPAService_reportQueueLength_presult__isset;

class IPAService_reportQueueLength_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~IPAService_reportQueueLength_presult() throw();
  int32_t* success;

  _IPAService_reportQueueLength_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const IPAService_reportQueueLength_presult& obj);
};

typedef struct _IPAService_updatBudget_args__isset {
  _IPAService_updatBudget_args__isset() : budget(false) {}
  bool budget :1;
} _IPAService_updatBudget_args__isset;

class IPAService_updatBudget_args {
 public:

  static const char* ascii_fingerprint; // = "66FFB53A2471384C03D9F21F6FACA58F";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xFF,0xB5,0x3A,0x24,0x71,0x38,0x4C,0x03,0xD9,0xF2,0x1F,0x6F,0xAC,0xA5,0x8F};

  IPAService_updatBudget_args(const IPAService_updatBudget_args&);
  IPAService_updatBudget_args& operator=(const IPAService_updatBudget_args&);
  IPAService_updatBudget_args() : budget(0) {
  }

  virtual ~IPAService_updatBudget_args() throw();
  double budget;

  _IPAService_updatBudget_args__isset __isset;

  void __set_budget(const double val);

  bool operator == (const IPAService_updatBudget_args & rhs) const
  {
    if (!(budget == rhs.budget))
      return false;
    return true;
  }
  bool operator != (const IPAService_updatBudget_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPAService_updatBudget_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const IPAService_updatBudget_args& obj);
};


class IPAService_updatBudget_pargs {
 public:

  static const char* ascii_fingerprint; // = "66FFB53A2471384C03D9F21F6FACA58F";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xFF,0xB5,0x3A,0x24,0x71,0x38,0x4C,0x03,0xD9,0xF2,0x1F,0x6F,0xAC,0xA5,0x8F};


  virtual ~IPAService_updatBudget_pargs() throw();
  const double* budget;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const IPAService_updatBudget_pargs& obj);
};


class IPAService_updatBudget_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  IPAService_updatBudget_result(const IPAService_updatBudget_result&);
  IPAService_updatBudget_result& operator=(const IPAService_updatBudget_result&);
  IPAService_updatBudget_result() {
  }

  virtual ~IPAService_updatBudget_result() throw();

  bool operator == (const IPAService_updatBudget_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IPAService_updatBudget_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPAService_updatBudget_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const IPAService_updatBudget_result& obj);
};


class IPAService_updatBudget_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~IPAService_updatBudget_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const IPAService_updatBudget_presult& obj);
};

typedef struct _IPAService_submitQuery_args__isset {
  _IPAService_submitQuery_args__isset() : query(false) {}
  bool query :1;
} _IPAService_submitQuery_args__isset;

class IPAService_submitQuery_args {
 public:

  static const char* ascii_fingerprint; // = "82246FE820A3526C6D99BE1DF7A0AD14";
  static const uint8_t binary_fingerprint[16]; // = {0x82,0x24,0x6F,0xE8,0x20,0xA3,0x52,0x6C,0x6D,0x99,0xBE,0x1D,0xF7,0xA0,0xAD,0x14};

  IPAService_submitQuery_args(const IPAService_submitQuery_args&);
  IPAService_submitQuery_args& operator=(const IPAService_submitQuery_args&);
  IPAService_submitQuery_args() {
  }

  virtual ~IPAService_submitQuery_args() throw();
   ::QuerySpec query;

  _IPAService_submitQuery_args__isset __isset;

  void __set_query(const  ::QuerySpec& val);

  bool operator == (const IPAService_submitQuery_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const IPAService_submitQuery_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPAService_submitQuery_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const IPAService_submitQuery_args& obj);
};


class IPAService_submitQuery_pargs {
 public:

  static const char* ascii_fingerprint; // = "82246FE820A3526C6D99BE1DF7A0AD14";
  static const uint8_t binary_fingerprint[16]; // = {0x82,0x24,0x6F,0xE8,0x20,0xA3,0x52,0x6C,0x6D,0x99,0xBE,0x1D,0xF7,0xA0,0xAD,0x14};


  virtual ~IPAService_submitQuery_pargs() throw();
  const  ::QuerySpec* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const IPAService_submitQuery_pargs& obj);
};


class IPAService_submitQuery_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  IPAService_submitQuery_result(const IPAService_submitQuery_result&);
  IPAService_submitQuery_result& operator=(const IPAService_submitQuery_result&);
  IPAService_submitQuery_result() {
  }

  virtual ~IPAService_submitQuery_result() throw();

  bool operator == (const IPAService_submitQuery_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IPAService_submitQuery_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPAService_submitQuery_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const IPAService_submitQuery_result& obj);
};


class IPAService_submitQuery_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~IPAService_submitQuery_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const IPAService_submitQuery_presult& obj);
};

class IPAServiceClient : virtual public IPAServiceIf {
 public:
  IPAServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IPAServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t reportQueueLength();
  void send_reportQueueLength();
  int32_t recv_reportQueueLength();
  void updatBudget(const double budget);
  void send_updatBudget(const double budget);
  void recv_updatBudget();
  void submitQuery(const  ::QuerySpec& query);
  void send_submitQuery(const  ::QuerySpec& query);
  void recv_submitQuery();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class IPAServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<IPAServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (IPAServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_reportQueueLength(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updatBudget(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_submitQuery(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  IPAServiceProcessor(boost::shared_ptr<IPAServiceIf> iface) :
    iface_(iface) {
    processMap_["reportQueueLength"] = &IPAServiceProcessor::process_reportQueueLength;
    processMap_["updatBudget"] = &IPAServiceProcessor::process_updatBudget;
    processMap_["submitQuery"] = &IPAServiceProcessor::process_submitQuery;
  }

  virtual ~IPAServiceProcessor() {}
};

class IPAServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  IPAServiceProcessorFactory(const ::boost::shared_ptr< IPAServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< IPAServiceIfFactory > handlerFactory_;
};

class IPAServiceMultiface : virtual public IPAServiceIf {
 public:
  IPAServiceMultiface(std::vector<boost::shared_ptr<IPAServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~IPAServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<IPAServiceIf> > ifaces_;
  IPAServiceMultiface() {}
  void add(boost::shared_ptr<IPAServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t reportQueueLength() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reportQueueLength();
    }
    return ifaces_[i]->reportQueueLength();
  }

  void updatBudget(const double budget) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updatBudget(budget);
    }
    ifaces_[i]->updatBudget(budget);
  }

  void submitQuery(const  ::QuerySpec& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->submitQuery(query);
    }
    ifaces_[i]->submitQuery(query);
  }

};



#endif
