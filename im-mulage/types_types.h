/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef types_TYPES_H
#define types_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class THostPort;

class LatencySpec;

class QuerySpec;

class RegMessage;

typedef struct _THostPort__isset {
  _THostPort__isset() : ip(false), port(false) {}
  bool ip :1;
  bool port :1;
} _THostPort__isset;

class THostPort {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  THostPort(const THostPort&);
  THostPort& operator=(const THostPort&);
  THostPort() : ip(), port(0) {
  }

  virtual ~THostPort() throw();
  std::string ip;
  int32_t port;

  _THostPort__isset __isset;

  void __set_ip(const std::string& val);

  void __set_port(const int32_t val);

  bool operator == (const THostPort & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const THostPort &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THostPort & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const THostPort& obj);
};

void swap(THostPort &a, THostPort &b);

typedef struct _LatencySpec__isset {
  _LatencySpec__isset() : instance_id(false), queuing_start_time(false), serving_start_time(false), serving_end_time(false) {}
  bool instance_id :1;
  bool queuing_start_time :1;
  bool serving_start_time :1;
  bool serving_end_time :1;
} _LatencySpec__isset;

class LatencySpec {
 public:

  static const char* ascii_fingerprint; // = "01233FF45FD1A48AF6DDBF39A5D0547E";
  static const uint8_t binary_fingerprint[16]; // = {0x01,0x23,0x3F,0xF4,0x5F,0xD1,0xA4,0x8A,0xF6,0xDD,0xBF,0x39,0xA5,0xD0,0x54,0x7E};

  LatencySpec(const LatencySpec&);
  LatencySpec& operator=(const LatencySpec&);
  LatencySpec() : instance_id(), queuing_start_time(0), serving_start_time(0), serving_end_time(0) {
  }

  virtual ~LatencySpec() throw();
  std::string instance_id;
  int64_t queuing_start_time;
  int64_t serving_start_time;
  int64_t serving_end_time;

  _LatencySpec__isset __isset;

  void __set_instance_id(const std::string& val);

  void __set_queuing_start_time(const int64_t val);

  void __set_serving_start_time(const int64_t val);

  void __set_serving_end_time(const int64_t val);

  bool operator == (const LatencySpec & rhs) const
  {
    if (!(instance_id == rhs.instance_id))
      return false;
    if (!(queuing_start_time == rhs.queuing_start_time))
      return false;
    if (!(serving_start_time == rhs.serving_start_time))
      return false;
    if (!(serving_end_time == rhs.serving_end_time))
      return false;
    return true;
  }
  bool operator != (const LatencySpec &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LatencySpec & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const LatencySpec& obj);
};

void swap(LatencySpec &a, LatencySpec &b);

typedef struct _QuerySpec__isset {
  _QuerySpec__isset() : name(false), input(false), timestamp(false), budget(false), floatingBudget(false) {}
  bool name :1;
  bool input :1;
  bool timestamp :1;
  bool budget :1;
  bool floatingBudget :1;
} _QuerySpec__isset;

class QuerySpec {
 public:

  static const char* ascii_fingerprint; // = "A54304EB3E0AD9A9AE80F7CA6F6AE4D2";
  static const uint8_t binary_fingerprint[16]; // = {0xA5,0x43,0x04,0xEB,0x3E,0x0A,0xD9,0xA9,0xAE,0x80,0xF7,0xCA,0x6F,0x6A,0xE4,0xD2};

  QuerySpec(const QuerySpec&);
  QuerySpec& operator=(const QuerySpec&);
  QuerySpec() : name(), input(), budget(0), floatingBudget(0) {
  }

  virtual ~QuerySpec() throw();
  std::string name;
  std::string input;
  std::vector<LatencySpec>  timestamp;
  double budget;
  double floatingBudget;

  _QuerySpec__isset __isset;

  void __set_name(const std::string& val);

  void __set_input(const std::string& val);

  void __set_timestamp(const std::vector<LatencySpec> & val);

  void __set_budget(const double val);

  void __set_floatingBudget(const double val);

  bool operator == (const QuerySpec & rhs) const
  {
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (!(input == rhs.input))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(budget == rhs.budget))
      return false;
    if (!(floatingBudget == rhs.floatingBudget))
      return false;
    return true;
  }
  bool operator != (const QuerySpec &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuerySpec & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const QuerySpec& obj);
};

void swap(QuerySpec &a, QuerySpec &b);

typedef struct _RegMessage__isset {
  _RegMessage__isset() : app_name(false), endpoint(false), budget(false) {}
  bool app_name :1;
  bool endpoint :1;
  bool budget :1;
} _RegMessage__isset;

class RegMessage {
 public:

  static const char* ascii_fingerprint; // = "B61C91CEFA669A76958C50E9981CDEEA";
  static const uint8_t binary_fingerprint[16]; // = {0xB6,0x1C,0x91,0xCE,0xFA,0x66,0x9A,0x76,0x95,0x8C,0x50,0xE9,0x98,0x1C,0xDE,0xEA};

  RegMessage(const RegMessage&);
  RegMessage& operator=(const RegMessage&);
  RegMessage() : app_name(), budget(0) {
  }

  virtual ~RegMessage() throw();
  std::string app_name;
  THostPort endpoint;
  double budget;

  _RegMessage__isset __isset;

  void __set_app_name(const std::string& val);

  void __set_endpoint(const THostPort& val);

  void __set_budget(const double val);

  bool operator == (const RegMessage & rhs) const
  {
    if (!(app_name == rhs.app_name))
      return false;
    if (!(endpoint == rhs.endpoint))
      return false;
    if (!(budget == rhs.budget))
      return false;
    return true;
  }
  bool operator != (const RegMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegMessage& obj);
};

void swap(RegMessage &a, RegMessage &b);



#endif
